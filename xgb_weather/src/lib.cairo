mod xgb_inference;

fn main(input_vector: Span<i32>) -> i32 {
    let tree_0 = xgb_inference::Tree {
    base_weights: array![0, -45, 162, 147, -97, 4467, 147, 32, 558, -259, -22, 2743, 18139, 938, 99, -22, 727, 22177, 549, -262, 3573, -299, 88, 7399, -222, 25869, -968, 4145, 677, 804, 57, 6, -1815, 459, 6267, 14435, -753, 775, -100, -338, -29, -306, 13112, 493, -3, 2645, 36612, 2311, -2168, 42033, -968, 14756, 2366, -1748, 966, -2766, 922, -171, 269, 430, -8, -634, 979, 83, 940, 1005, 14012, 201, 1057, -40, 6653, -73, -203, 189, -81, -66, -255, 7155, -988, 1955, 142, 260, -15, 1624, -1073, -753, 14012, -388, 5663, -1108, 1094, -753, 15663, 7496, 600, 1503, 61, 404, -793, 2979, 228, -1114, -156, 913, 207, -144, 78, 106, -308].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 0, 41, 43, 45, 47, 49, 0, 51, 53, 55, 57, 59, 61, 63, 65, 0, 0, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 0, 93, 95, 97, 99, 101, 103, 105, 107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 0, 42, 44, 46, 48, 50, 0, 52, 54, 56, 58, 60, 62, 64, 66, 0, 0, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 0, 94, 96, 98, 100, 102, 104, 106, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 3, 1, 3, 0, 0, 2, 2, 1, 1, 1, 2, 0, 1, 3, 0, 3, 0, 1, 1, 0, 4, 1, 0, 0, 3, 0, 0, 3, 0, 3, 1, 2, 0, 0, 0, 0, 1, 0, 0, 1, 2, 0, 0, 0, 3, 3, 0, 2, 3, 0, 3, 0, 0, 3, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![129000, 97768000, 600000, 96994000, 1470000, 2500000, 135000, 103000, 1300000, 25500000, 5900000, 206000, 3430000, 3800000, 90139000, 3530000, 96794000, 3530000, 9400000, 9800000, 3573, 100000, 6700000, 2300000, 2230000, 98366000, -968, 2150000, 96376000, 1130000, 100046000, 1600000, 97000, 3170000, 2920000, 14435, -753, 9300000, 3080000, 1410000, 9900000, 97000, 2400000, 1480000, 1490000, 100981000, 97966000, 2190000, 470000, 83137000, -968, 97662000, 2820000, 1310000, 96994000, 8600000, 1390000, 7200000, 9800000, 430, -8, -634, 979, 83, 940, 1005, 14012, 201, 1057, -40, 6653, -73, -203, 189, -81, -66, -255, 7155, -988, 1955, 142, 260, -15, 1624, -1073, -753, 14012, -388, 5663, -1108, 1094, -753, 15663, 7496, 600, 1503, 61, 404, -793, 2979, 228, -1114, -156, 913, 207, -144, 78, 106, -308].span()
};
    let tree_1 = xgb_inference::Tree {
    base_weights: array![0, -4, 1584, 589, -11, -1160, 1893, -236, 1164, -235, 6, 2444, -1598, -350, 11447, 661, 2798, 297, -424, 1214, 1, 1992, 34165, 6516, -2569, 272, -1405, -1063, 21261, 4775, 459, 250, 5798, 276, 2584, -564, 208, -30, 3744, -96, 35, 2396, -1110, 13510, 19226, -1032, 14419, -1130, 2239, 19, 1714, -1151, -298, 11005, -999, 2715, -1251, -909, 232, 847, -506, 2080, -1087, 104, -479, -133, -486, 6669, 52, -150, 1910, 4696, 842, 249, -41, 85, -4, -216, 934, 14419, -904, 14419, -1089].span(),
    left_children: array![1, 3, 5, 7, 9, 0, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 0, 53, 55, 57, 59, 61, 63, 0, 65, 67, 69, 71, 73, 75, 77, 0, 79, 0, 0, 0, 0, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 0, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 0, 54, 56, 58, 60, 62, 64, 0, 66, 68, 70, 72, 74, 76, 78, 0, 80, 0, 0, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 3, 3, 0, 0, 0, 3, 2, 1, 0, 0, 3, 0, 0, 1, 0, 0, 1, 3, 2, 1, 3, 0, 0, 0, 0, 1, 0, 1, 2, 0, 0, 1, 4, 0, 3, 1, 3, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![657000, 84363000, 85251000, 1680000, 1150000, -1160, 101266000, 509000, 4300000, 880000, 1160000, 101219000, 1430000, 1330000, 5600000, 1830000, 1880000, 25500000, 100901000, 45000, 5900000, 100997000, 2740000, 1420000, 2320000, 1310000, 3300000, -1063, 6900000, 129000, 2020000, 1760000, 6500000, 100000, 2584, 100515000, 5700000, 101136000, 52000, 1580000, 6800000, 1430000, -1110, 1490000, 19226, -1032, 14419, -1130, 2400000, 19, 1714, -1151, -298, 11005, -999, 2715, -1251, -909, 232, 847, -506, 2080, -1087, 104, -479, -133, -486, 6669, 52, -150, 1910, 4696, 842, 249, -41, 85, -4, -216, 934, 14419, -904, 14419, -1089].span()
};
    let tree_2 = xgb_inference::Tree {
    base_weights: array![1, -2, 1190, 434, -9, -822, 1961, -136, 1227, -2432, -6, 8607, -1656, 6116, 988, -436, 3440, 1179, 13325, 185, -3405, -86, 28, 36076, -1067, -2893, 5785, 14331, 5174, -4247, 2147, -13, -1878, 2606, 25599, 3155, 852, -720, 30895, -1134, -1449, -38, -351, 189, -42, -736, 46321, -3465, -675, 29417, 152, 2550, 14303, -1384, -781, 38724, 1369, 1696, -74, -175, -915, 463, 3463, 11190, -732, 1231, -1089, 517, -95, 3368, -475, 14451, -549, 5047, -1077, 281, -20, -59, -468, 635, 53, 338, -16, -736, 19019, -655, -1277, 3417, -1133, 15654, -946, 1707, -1236, 2556, -555, 7778, 1027, -736, 13799, 1769, 175].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 0, 37, 39, 41, 43, 45, 0, 47, 49, 0, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 0, 73, 75, 77, 79, 81, 0, 83, 85, 87, 89, 91, 93, 95, 0, 0, 97, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 0, 38, 40, 42, 44, 46, 0, 48, 50, 0, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 0, 74, 76, 78, 80, 82, 0, 84, 86, 88, 90, 92, 94, 96, 0, 0, 98, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 1, 1, 2, 1, 0, 1, 1, 4, 2, 0, 1, 0, 0, 1, 3, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 1, 0, 2, 3, 3, 3, 0, 3, 0, 0, 3, 1, 2, 1, 3, 0, 1, 1, 0, 0, 3, 3, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![657000, 2300000, 5900000, 110000, 2400000, 1520000, 6900000, 2200000, 100000, 19000, 1450000, 3500000, 2890000, 1160000, 7700000, 96689000, 3930000, 135000, 13325, 100963000, 3220000, 1410000, 1710000, 1460000, -1067, 2500000, 4500000, 14331, 2430000, 100997000, 7800000, 1890000, 40000, 100121000, 99937000, 99511000, 3220000, 81450000, 3120000, -1134, 94112000, 6200000, 193000, 3600000, 84363000, -736, 2500000, 3800000, 2520000, 3430000, 100105000, 99689000, 6200000, -1384, -781, 1490000, 99655000, 1696, -74, -175, -915, 463, 3463, 11190, -732, 1231, -1089, 517, -95, 3368, -475, 14451, -549, 5047, -1077, 281, -20, -59, -468, 635, 53, 338, -16, -736, 19019, -655, -1277, 3417, -1133, 15654, -946, 1707, -1236, 2556, -555, 7778, 1027, -736, 13799, 1769, 175].span()
};
    let tree_3 = xgb_inference::Tree {
    base_weights: array![1, -25, 116, -16, -744, 3168, 105, -28, 370, -2316, -372, 10086, 1128, 721, 67, 3, -255, -595, 528, -492, -2969, -409, 17149, -938, 26352, -191, 7415, 13217, 645, -33, 310, 11, -991, 2393, -279, 1222, -1976, 4748, 477, -1118, 22327, -334, -3402, -260, -1151, 30958, -713, -1655, 5808, 35279, -639, 1890, -2303, 5058, 9598, -956, 34119, 857, -1925, -89, 851, 409, -1050, 85, -4, -452, 1351, 1318, -1315, -68, -350, 95, 2440, 261, -804, -1183, 2382, 2405, 136, -513, 2766, 14465, -713, -581, 6661, -1106, -159, -100, 4945, -535, 14465, 14077, -899, -752, 12713, 178, 8019, -1193, 1418, 7847, 585, 19273, 4011, 200, 1688, 9282, -706, -196, 8, 809, 77, 635, 101, -120, -784].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 0, 89, 0, 0, 91, 93, 0, 95, 97, 99, 0, 0, 101, 103, 105, 107, 109, 111, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 0, 90, 0, 0, 92, 94, 0, 96, 98, 100, 0, 0, 102, 104, 106, 108, 110, 112, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 1, 2, 1, 2, 2, 2, 3, 3, 0, 0, 0, 0, 3, 0, 3, 1, 3, 3, 0, 3, 1, 3, 0, 0, 2, 3, 1, 1, 1, 1, 3, 0, 3, 3, 3, 1, 0, 1, 0, 0, 0, 3, 0, 1, 0, 0, 3, 3, 0, 0, 3, 2, 0, 0, 3, 1, 0, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![148000, 142000, 600000, 129000, 4800000, 180000, 155000, 90000, 96494000, 96157000, 3930000, 2150000, 2460000, 840000, 100671000, 3530000, 83137000, 5000000, 96794000, 96066000, 1930000, 101474000, 5200000, 100947000, 2630000, 2230000, 657000, 98220000, 9500000, 9500000, 9800000, 4600000, 101474000, 2550000, 101474000, 95171000, 90654000, 3900000, 910000, 4500000, 2070000, 1920000, 3430000, 101450000, -1151, 5100000, -713, -1655, 100981000, 83137000, -639, 2220000, 101136000, 206000, 9598, -956, 100016000, 9300000, 970000, 174000, 180000, 3800000, 1440000, 85, -4, -452, 1351, 1318, -1315, -68, -350, 95, 2440, 261, -804, -1183, 2382, 2405, 136, -513, 2766, 14465, -713, -581, 6661, -1106, -159, -100, 4945, -535, 14465, 14077, -899, -752, 12713, 178, 8019, -1193, 1418, 7847, 585, 19273, 4011, 200, 1688, 9282, -706, -196, 8, 809, 77, 635, 101, -120, -784].span()
};
    let tree_4 = xgb_inference::Tree {
    base_weights: array![1, 491, -4, -119, 1267, -1078, -1, -1539, 560, 1205, 11336, -2359, 145, 2216, -3, 7318, -1681, 3764, 71, 721, 3999, 901, -3433, 4144, -916, 7039, -1701, -1522, -1, -1520, 14101, -1860, 6241, 5094, -1147, -2826, 350, 20630, 642, -1250, 7695, 4198, -1607, -4161, 2193, 792, 8386, -1139, 13, 15841, 3636, 29726, -2318, -447, -3573, 1942, -4, -1105, -450, -744, 9096, 1173, 5654, -1238, -93, 14375, 70, 14126, -1165, 437, -226, -1253, 1626, 4906, 1032, 4440, -83, 1994, -1089, -1129, -1368, 14384, -311, -362, 3997, -1030, 4336, 4558, -361, 7759, 1971, 212, 8974, 13976, -600, -1119, 1369, -491, 3191, -1147, -880, 5472, 449, -382, 0].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 0, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 0, 0, 57, 59, 61, 0, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 0, 87, 89, 91, 93, 95, 97, 99, 101, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 0, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 0, 0, 58, 60, 62, 0, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 0, 88, 90, 92, 94, 96, 98, 100, 102, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 2, 1, 1, 4, 0, 1, 0, 1, 1, 0, 2, 0, 0, 1, 0, 2, 2, 0, 2, 2, 3, 2, 0, 0, 3, 3, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 3, 0, 1, 0, 2, 2, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![1700000, 110000, 2000000, 1000000, 100000, 2850000, 2100000, 1190000, 1100000, 1500000, 11336, 13000, 3000000, 2600000, 2200000, 1170000, 109000, 90000, 2250000, 116000, 193000, 88631000, 328000, 2920000, 3220000, 85797000, 81450000, 2920000, 2300000, -1520, 14101, 1630000, 2850000, 77000, -1147, 1500000, 2270000, 3280000, 1100000, 95047000, 2890000, 1800000, 2350000, 109000, 335000, 95970000, 39000, -1139, 3280000, 1890000, 2550000, 2650000, 3930000, 2820000, 3530000, 1520000, 2500000, -1105, -450, -744, 9096, 1173, 5654, -1238, -93, 14375, 70, 14126, -1165, 437, -226, -1253, 1626, 4906, 1032, 4440, -83, 1994, -1089, -1129, -1368, 14384, -311, -362, 3997, -1030, 4336, 4558, -361, 7759, 1971, 212, 8974, 13976, -600, -1119, 1369, -491, 3191, -1147, -880, 5472, 449, -382, 0].span()
};
    let tree_5 = xgb_inference::Tree {
    base_weights: array![1, -205, 11, 204, -500, 9, 985, 1181, 88, -2318, -437, 164, -2, 2363, 193, 1023, 30819, 159, -2872, 132, -3277, 6181, -493, -126, 518, -91, 24, 28833, 1818, -3661, 936, 864, 30630, 14434, -566, 125, 14828, 4368, -1133, -2612, 36870, -1269, -1154, 12358, -409, -112, -702, 20577, -135, 549, -2511, -59, -776, 144, -25, -627, 37085, 1155, 21477, -3344, -1577, 6820, 524, -315, 691, -608, 14392, -93, 161, 14249, -1008, -978, 6704, -1229, 3210, -710, 19145, -1150, 2938, 458, 8172, 4976, -1098, -135, 672, -401, -69, -1355, 14379, -1210, -32, 155, 1086, -1143, 255, -21, 803, -287, 593, 35, 410, -19, 47, -569, 15214, -405, 895, 11099, -988, -1095, -572, 917, 14007, -125, 913].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 0, 0, 67, 69, 71, 0, 73, 75, 77, 0, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 0, 103, 105, 107, 109, 0, 111, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 0, 0, 68, 70, 72, 0, 74, 76, 78, 0, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 0, 104, 106, 108, 110, 0, 112, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 2, 1, 1, 0, 0, 3, 2, 1, 1, 2, 0, 1, 3, 2, 0, 2, 3, 1, 3, 0, 3, 1, 2, 3, 0, 0, 0, 1, 3, 2, 0, 0, 0, 1, 3, 2, 0, 1, 0, 2, 0, 2, 3, 3, 3, 0, 1, 2, 3, 3, 2, 3, 2, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![1060000, 880000, 657000, 7400000, 6000000, 1220000, 1550000, 101813000, 251000, 4600000, 6200000, 6000, 1460000, 3500000, 88631000, 560000, 840000, 245000, 91574000, 4400000, 86644000, 1000000, 97600000, 2700000, 425000, 101242000, 1710000, 1460000, 1540000, 5800000, 94331000, 6000, 610000, 14434, -566, 9600000, 93564000, 328000, -1133, 4200000, 950000, 71000, -1154, 58000, 85797000, 96689000, 100239000, 1180000, 5500000, 354000, 100538000, 101197000, 225000, 101582000, 174000, -627, 2500000, 8800000, 8500000, 4400000, -1577, 9500000, 2380000, -315, 691, -608, 14392, -93, 161, 14249, -1008, -978, 6704, -1229, 3210, -710, 19145, -1150, 2938, 458, 8172, 4976, -1098, -135, 672, -401, -69, -1355, 14379, -1210, -32, 155, 1086, -1143, 255, -21, 803, -287, 593, 35, 410, -19, 47, -569, 15214, -405, 895, 11099, -988, -1095, -572, 917, 14007, -125, 913].span()
};
    let tree_6 = xgb_inference::Tree {
    base_weights: array![1, -62, 22, 80, -180, 461, 0, 20, 821, -857, -76, 320, 3512, 6, -585, -199, 159, 3149, 74, 1673, -1047, 472, -185, 13614, 289, 16909, 1867, 24, -184, 58, -1503, 264, -442, 5492, 140, 43208, 2714, -396, 2889, 1411, 14034, -1683, -563, -118, 1043, -125, -1536, 36407, 6527, -316, 936, -1125, 24689, 436, 11450, 12, 639, -468, 93, 3139, -807, -1787, 4636, -24, 551, -391, -70, 488, 10689, 331, 14, -574, 15784, 2042, 533, -560, 147, 4535, 234, -195, 1434, -430, -1077, 228, -300, 263, -235, 3081, 284, -49, 758, 10580, -509, -561, 13933, -1326, 7308, -121, 890, -745, 317, 11711, 4331, -229, 1767, 7664, 1282, -222, 5, -414, 289, 955, -156, 11, 1457, 523, 9869, -296, 2906, -745, -169, 573, 14595].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 0, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 0, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 0, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 0, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 1, 1, 1, 1, 2, 0, 0, 2, 3, 1, 3, 2, 2, 1, 0, 1, 3, 2, 0, 0, 1, 3, 0, 0, 0, 3, 2, 2, 3, 2, 0, 0, 0, 0, 0, 3, 3, 0, 2, 0, 0, 2, 0, 0, 3, 0, 2, 0, 3, 3, 0, 0, 2, 3, 3, 0, 0, 0, 3, 3, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![5900000, 4600000, 6200000, 4500000, 4800000, 316000, 3170000, 2410000, 13000, 90139000, 5000000, 81450000, 328000, 206000, 7100000, 1930000, 400000, 83137000, 258000, 2690000, 2300000, 4900000, 101526000, 790000, 2070000, 1820000, 100981000, 187000, 277000, 99655000, 444000, 1870000, 2040000, 2620000, 2490000, 790000, 97205000, 98969000, 1850000, 103000, 14034, 2250000, 13000, 2210000, 1300000, 101398000, 1250000, 6000, 1240000, 101679000, 95970000, -1125, 2090000, 560000, 101197000, 85797000, 1310000, 950000, 3080000, 99603000, 102415000, 8300000, 100000, -24, 551, -391, -70, 488, 10689, 331, 14, -574, 15784, 2042, 533, -560, 147, 4535, 234, -195, 1434, -430, -1077, 228, -300, 263, -235, 3081, 284, -49, 758, 10580, -509, -561, 13933, -1326, 7308, -121, 890, -745, 317, 11711, 4331, -229, 1767, 7664, 1282, -222, 5, -414, 289, 955, -156, 11, 1457, 523, 9869, -296, 2906, -745, -169, 573, 14595].span()
};
    let tree_7 = xgb_inference::Tree {
    base_weights: array![1, -122, 11, -95, -2136, 832, 7, -3534, -79, -2436, 3533, 758, 12239, -625, 10, -3080, -4414, 317, -177, 752, -3099, 13117, -975, 5591, 370, -824, 10024, 601, 4, -1085, -832, -1346, -362, 283, 12100, -217, 1747, 12231, -1084, -3571, 3873, -990, 14281, 3580, 35838, -274, 3743, -1, -2094, -1274, 39172, 11966, 572, -450, 6, 10, 452, 1629, 11822, -156, -10, 6604, 446, 3977, -855, -341, -1077, 9339, -979, -1171, 2355, 13794, -710, -109, 3689, -7, 1810, 138, -404, 3824, -688, -953, 21518, 273, -789, 1630, -213, 145, 0].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 0, 25, 27, 29, 31, 33, 35, 37, 39, 41, 0, 43, 45, 47, 49, 51, 53, 0, 0, 0, 0, 55, 57, 59, 61, 0, 63, 65, 67, 0, 0, 69, 71, 73, 75, 77, 79, 0, 81, 0, 83, 85, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 0, 26, 28, 30, 32, 34, 36, 38, 40, 42, 0, 44, 46, 48, 50, 52, 54, 0, 0, 0, 0, 56, 58, 60, 62, 0, 64, 66, 68, 0, 0, 70, 72, 74, 76, 78, 80, 0, 82, 0, 84, 86, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 2, 0, 1, 0, 2, 0, 2, 1, 0, 2, 3, 0, 2, 0, 0, 3, 3, 2, 1, 4, 2, 0, 1, 2, 2, 3, 1, 0, 0, 0, 0, 0, 0, 0, 1, 3, 0, 3, 1, 3, 0, 0, 3, 2, 3, 3, 3, 1, 0, 1, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![1150000, 309000, 1160000, 3700000, 1140000, 470000, 1170000, 6000, 8400000, 720000, 367000, 92807000, 12239, 316000, 1190000, 880000, 84363000, 102415000, 200000, 7000000, 100000, 354000, -975, 9800000, 103000, 20000, 100239000, 200000, 1200000, -1085, -832, -1346, -362, 1110000, 1040000, 9400000, 81450000, 12231, 91574000, 4200000, 99903000, -990, 14281, 86644000, 52000, 102415000, 98995000, 100330000, 5200000, -1274, 8100000, 11966, 100901000, 6800000, 1220000, 10, 452, 1629, 11822, -156, -10, 6604, 446, 3977, -855, -341, -1077, 9339, -979, -1171, 2355, 13794, -710, -109, 3689, -7, 1810, 138, -404, 3824, -688, -953, 21518, 273, -789, 1630, -213, 145, 0].span()
};
    let tree_8 = xgb_inference::Tree {
    base_weights: array![1, 10, -145, -1, 444, -693, -63, 100, -26, -178, 1452, -307, -1758, 316, -196, 126, -1585, -61, 89, 11478, -236, 2040, -976, -59, -1103, -2072, 9019, -258, 901, 2852, -228, -1553, 137, 7953, -1652, 712, -70, 28, 727, 18010, -968, -479, 1805, 1993, 14423, 3137, -1568, 318, -1627, -667, -1167, -1026, 37068, -434, 5290, 527, 3683, 2148, 16916, -435, 216, 1628, -516, 429, 37, -526, 1744, 164, 2330, -11, -87, 210, -3, 982, 147, 8996, -887, -107, -1161, 486, 11904, 684, -189, 132, 5053, -718, 323, -19, 1336, -1151, 213, -1260, -9, -552, 14177, 22, -578, 371, 4966, 1589, 61, -1115, 1750, 1132, -1124, 9229, -771, -144, 1426, 135, -578].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 0, 49, 51, 53, 55, 57, 59, 61, 63, 0, 65, 67, 69, 71, 73, 75, 0, 77, 79, 81, 0, 83, 85, 87, 89, 91, 0, 0, 93, 95, 97, 99, 101, 103, 105, 107, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 0, 50, 52, 54, 56, 58, 60, 62, 64, 0, 66, 68, 70, 72, 74, 76, 0, 78, 80, 82, 0, 84, 86, 88, 90, 92, 0, 0, 94, 96, 98, 100, 102, 104, 106, 108, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 1, 3, 3, 3, 2, 3, 2, 2, 3, 2, 4, 3, 0, 0, 1, 1, 1, 1, 2, 0, 2, 0, 3, 0, 3, 4, 3, 2, 2, 3, 0, 1, 0, 3, 3, 2, 2, 3, 0, 0, 0, 2, 0, 0, 2, 2, 3, 0, 3, 0, 0, 0, 0, 0, 0, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![9900000, 9800000, 97205000, 97715000, 100342000, 6000, 99157000, 444000, 129000, 85797000, 116000, 100000, 97107000, 1250000, 610000, 900000, 600000, 3200000, 9200000, 20000, 1470000, 110000, 1330000, 96689000, -1103, 95699000, 100000, 99112000, 84000, 97000, 100792000, 1190000, 1100000, 7953, 97545000, 101582000, 90000, 135000, 98631000, 610000, -968, 1440000, 509000, 2250000, 14423, 225000, 251000, 96494000, 1260000, 92479000, -1167, -1026, 1270000, 1210000, 1210000, 1260000, 97966000, 6000, 103000, 2530000, 2360000, 1628, -516, 429, 37, -526, 1744, 164, 2330, -11, -87, 210, -3, 982, 147, 8996, -887, -107, -1161, 486, 11904, 684, -189, 132, 5053, -718, 323, -19, 1336, -1151, 213, -1260, -9, -552, 14177, 22, -578, 371, 4966, 1589, 61, -1115, 1750, 1132, -1124, 9229, -771, -144, 1426, 135, -578].span()
};
    let tree_9 = xgb_inference::Tree {
    base_weights: array![1, 0, 661, -19, 58, 1165, -1462, -1, -195, -69, 310, 432, 5435, -1946, 20491, -9, 594, -484, 31, 38, -379, 1041, 56, 10135, 143, 10884, -1983, -4702, 839, 10118, -897, 30, -106, -4226, 695, -547, 2756, 515, -249, -2150, 56, 12907, -387, 1524, 314, -668, 189, -1301, 21756, 460, -4542, 1515, 22857, -4346, 25461, -619, -5076, 21504, -466, -10, 51, 431, -39, -541, -1299, 3861, 192, 306, -186, 8865, 526, 133, 4428, -287, -20, -1399, -159, 382, 11, -147, 131, 326, 1053, 52, 2623, -75, -606, 372, -14, -54, -581, 2872, 14227, -281, 504, -1441, -680, 4434, -393, 16642, 3576, -1437, -773, 12054, -597, -1932, -1397, -916, 14276, 2679, -533].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 0, 0, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 0, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 0, 105, 107, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 0, 0, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 0, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 0, 106, 108, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 0, 1, 2, 3, 1, 0, 2, 2, 3, 0, 0, 0, 3, 0, 0, 3, 0, 2, 3, 1, 3, 0, 0, 1, 0, 3, 0, 3, 0, 0, 0, 1, 0, 3, 0, 3, 3, 3, 0, 3, 0, 0, 3, 2, 0, 0, 1, 1, 3, 3, 3, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![657000, 2170000, 9400000, 200000, 100619000, 8800000, 1660000, 187000, 258000, 99969000, 2360000, 1210000, 1570000, 100861000, 2050000, 1750000, 85797000, 2140000, 303000, 81450000, 400000, 101197000, 2450000, 1130000, 8600000, 1480000, 101474000, 1040000, 100873000, 10118, -897, 1520000, 3200000, 790000, 86644000, 1150000, 89369000, 102415000, 97490000, 2400000, 83137000, 12907, 3120000, 101071000, 425000, 2430000, 2550000, 7700000, 8000000, 99370000, 100803000, 98331000, 9000000, 101176000, 2400000, -619, 99705000, 1450000, 1410000, -10, 51, 431, -39, -541, -1299, 3861, 192, 306, -186, 8865, 526, 133, 4428, -287, -20, -1399, -159, 382, 11, -147, 131, 326, 1053, 52, 2623, -75, -606, 372, -14, -54, -581, 2872, 14227, -281, 504, -1441, -680, 4434, -393, 16642, 3576, -1437, -773, 12054, -597, -1932, -1397, -916, 14276, 2679, -533].span()
};
    let num_trees: u32 = 10;
    let base_score: i32 = 3764;
    let opt_type: u8 = 0;
    let trees: Span<xgb_inference::Tree> = array![tree_0, tree_1, tree_2, tree_3, tree_4, tree_5, tree_6, tree_7, tree_8, tree_9].span();
    let mut result: i32 = xgb_inference::accumulate_scores_from_trees(num_trees, trees, input_vector, 0, 0);

    if opt_type == 1 {
        // Implement logic here
    } else {
        result = result + base_score;
    }

    return result;
}